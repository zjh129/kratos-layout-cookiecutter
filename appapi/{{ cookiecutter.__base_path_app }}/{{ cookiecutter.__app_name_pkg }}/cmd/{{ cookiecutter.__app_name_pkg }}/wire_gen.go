// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"{{ cookiecutter.__project_name_snake }}/app/user/internal/biz"
	"{{ cookiecutter.__project_name_snake }}/app/user/internal/conf"
	"{{ cookiecutter.__project_name_snake }}/app/user/internal/data"
	"{{ cookiecutter.__project_name_snake }}/app/user/internal/server"
	"{{ cookiecutter.__project_name_snake }}/app/user/internal/service"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	dataData, cleanup, err := data.NewData(confData, logger)
	if err != nil {
		return nil, nil, err
	}
	{{ cookiecutter.__app_name_camel }}Repo := data.New{{ cookiecutter.__app_name_camel }}Repo(dataData, logger)
	{{ cookiecutter.__app_name_camel }}Usecase := biz.New{{ cookiecutter.__app_name_camel }}Usecase({{ cookiecutter.__app_name_camel }}Repo, logger)
	{{ cookiecutter.__app_name_camel }}Service := service.New{{ cookiecutter.__app_name_camel }}Service({{ cookiecutter.__app_name_camel }}Usecase)
	userService := service.NewUserService({{ cookiecutter.__app_name_camel }}Usecase)
	grpcServer := server.NewGRPCServer(confServer, {{ cookiecutter.__app_name_camel }}Service, userService, logger)
	httpServer := server.NewHTTPServer(confServer, {{ cookiecutter.__app_name_camel }}Service, logger)
	app := newApp(logger, grpcServer, httpServer)
	return app, func() {
		cleanup()
	}, nil
}
